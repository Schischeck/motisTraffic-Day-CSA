// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RailvizProtocolV2.proto

#ifndef PROTOBUF_RailvizProtocolV2_2eproto__INCLUDED
#define PROTOBUF_RailvizProtocolV2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace td {
namespace railviz {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RailvizProtocolV2_2eproto();
void protobuf_AssignDesc_RailvizProtocolV2_2eproto();
void protobuf_ShutdownFile_RailvizProtocolV2_2eproto();

class Station;
class Request;
class Response;

enum Request_TYPE {
  Request_TYPE_ALL_STATIONS = 1,
  Request_TYPE_DETAILED_STATION = 2
};
bool Request_TYPE_IsValid(int value);
const Request_TYPE Request_TYPE_TYPE_MIN = Request_TYPE_ALL_STATIONS;
const Request_TYPE Request_TYPE_TYPE_MAX = Request_TYPE_DETAILED_STATION;
const int Request_TYPE_TYPE_ARRAYSIZE = Request_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_TYPE_descriptor();
inline const ::std::string& Request_TYPE_Name(Request_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_TYPE_descriptor(), value);
}
inline bool Request_TYPE_Parse(
    const ::std::string& name, Request_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_TYPE>(
    Request_TYPE_descriptor(), name, value);
}
enum Response_TYPE {
  Response_TYPE_ERROR = 1,
  Response_TYPE_INFO = 2,
  Response_TYPE_ALL_STATIONS = 3,
  Response_TYPE_DETAILED_STATION = 4
};
bool Response_TYPE_IsValid(int value);
const Response_TYPE Response_TYPE_TYPE_MIN = Response_TYPE_ERROR;
const Response_TYPE Response_TYPE_TYPE_MAX = Response_TYPE_DETAILED_STATION;
const int Response_TYPE_TYPE_ARRAYSIZE = Response_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_TYPE_descriptor();
inline const ::std::string& Response_TYPE_Name(Response_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_TYPE_descriptor(), value);
}
inline bool Response_TYPE_Parse(
    const ::std::string& name, Response_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_TYPE>(
    Response_TYPE_descriptor(), name, value);
}
// ===================================================================

class Station : public ::google::protobuf::Message {
 public:
  Station();
  virtual ~Station();

  Station(const Station& from);

  inline Station& operator=(const Station& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Station& default_instance();

  void Swap(Station* other);

  // implements Message ----------------------------------------------

  Station* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Station& from);
  void MergeFrom(const Station& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional float latitude = 3;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  inline float latitude() const;
  inline void set_latitude(float value);

  // optional float longitude = 4;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  inline float longitude() const;
  inline void set_longitude(float value);

  // @@protoc_insertion_point(class_scope:td.railviz.protocol.Station)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  float latitude_;
  float longitude_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_AssignDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_ShutdownFile_RailvizProtocolV2_2eproto();

  void InitAsDefaultInstance();
  static Station* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_TYPE TYPE;
  static const TYPE ALL_STATIONS = Request_TYPE_ALL_STATIONS;
  static const TYPE DETAILED_STATION = Request_TYPE_DETAILED_STATION;
  static inline bool TYPE_IsValid(int value) {
    return Request_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    Request_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    Request_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    Request_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return Request_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return Request_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return Request_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 protocol_version = 1;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  inline ::google::protobuf::int32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::int32 value);

  // required .td.railviz.protocol.Request.TYPE type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::td::railviz::protocol::Request_TYPE type() const;
  inline void set_type(::td::railviz::protocol::Request_TYPE value);

  // repeated .td.railviz.protocol.Station stations = 3;
  inline int stations_size() const;
  inline void clear_stations();
  static const int kStationsFieldNumber = 3;
  inline const ::td::railviz::protocol::Station& stations(int index) const;
  inline ::td::railviz::protocol::Station* mutable_stations(int index);
  inline ::td::railviz::protocol::Station* add_stations();
  inline const ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >&
      stations() const;
  inline ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >*
      mutable_stations();

  // @@protoc_insertion_point(class_scope:td.railviz.protocol.Request)
 private:
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 protocol_version_;
  int type_;
  ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station > stations_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_AssignDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_ShutdownFile_RailvizProtocolV2_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_TYPE TYPE;
  static const TYPE ERROR = Response_TYPE_ERROR;
  static const TYPE INFO = Response_TYPE_INFO;
  static const TYPE ALL_STATIONS = Response_TYPE_ALL_STATIONS;
  static const TYPE DETAILED_STATION = Response_TYPE_DETAILED_STATION;
  static inline bool TYPE_IsValid(int value) {
    return Response_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    Response_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    Response_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    Response_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return Response_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return Response_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return Response_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 protocol_version = 1;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  inline ::google::protobuf::int32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::int32 value);

  // required .td.railviz.protocol.Response.TYPE type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::td::railviz::protocol::Response_TYPE type() const;
  inline void set_type(::td::railviz::protocol::Response_TYPE value);

  // optional string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // repeated .td.railviz.protocol.Station stations = 4;
  inline int stations_size() const;
  inline void clear_stations();
  static const int kStationsFieldNumber = 4;
  inline const ::td::railviz::protocol::Station& stations(int index) const;
  inline ::td::railviz::protocol::Station* mutable_stations(int index);
  inline ::td::railviz::protocol::Station* add_stations();
  inline const ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >&
      stations() const;
  inline ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >*
      mutable_stations();

  // @@protoc_insertion_point(class_scope:td.railviz.protocol.Response)
 private:
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 protocol_version_;
  int type_;
  ::std::string* msg_;
  ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station > stations_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_AssignDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_ShutdownFile_RailvizProtocolV2_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Station

// optional int32 id = 1;
inline bool Station::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Station::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Station::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Station::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Station::id() const {
  return id_;
}
inline void Station::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Station::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Station::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Station::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Station::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Station::name() const {
  return *name_;
}
inline void Station::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Station::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Station::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Station::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Station::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Station::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float latitude = 3;
inline bool Station::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Station::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Station::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Station::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float Station::latitude() const {
  return latitude_;
}
inline void Station::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
}

// optional float longitude = 4;
inline bool Station::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Station::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Station::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Station::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float Station::longitude() const {
  return longitude_;
}
inline void Station::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
}

// -------------------------------------------------------------------

// Request

// required int32 protocol_version = 1;
inline bool Request::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_protocol_version() {
  protocol_version_ = 0;
  clear_has_protocol_version();
}
inline ::google::protobuf::int32 Request::protocol_version() const {
  return protocol_version_;
}
inline void Request::set_protocol_version(::google::protobuf::int32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
}

// required .td.railviz.protocol.Request.TYPE type = 2;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::td::railviz::protocol::Request_TYPE Request::type() const {
  return static_cast< ::td::railviz::protocol::Request_TYPE >(type_);
}
inline void Request::set_type(::td::railviz::protocol::Request_TYPE value) {
  assert(::td::railviz::protocol::Request_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .td.railviz.protocol.Station stations = 3;
inline int Request::stations_size() const {
  return stations_.size();
}
inline void Request::clear_stations() {
  stations_.Clear();
}
inline const ::td::railviz::protocol::Station& Request::stations(int index) const {
  return stations_.Get(index);
}
inline ::td::railviz::protocol::Station* Request::mutable_stations(int index) {
  return stations_.Mutable(index);
}
inline ::td::railviz::protocol::Station* Request::add_stations() {
  return stations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >&
Request::stations() const {
  return stations_;
}
inline ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >*
Request::mutable_stations() {
  return &stations_;
}

// -------------------------------------------------------------------

// Response

// required int32 protocol_version = 1;
inline bool Response::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_protocol_version() {
  protocol_version_ = 0;
  clear_has_protocol_version();
}
inline ::google::protobuf::int32 Response::protocol_version() const {
  return protocol_version_;
}
inline void Response::set_protocol_version(::google::protobuf::int32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
}

// required .td.railviz.protocol.Response.TYPE type = 2;
inline bool Response::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::td::railviz::protocol::Response_TYPE Response::type() const {
  return static_cast< ::td::railviz::protocol::Response_TYPE >(type_);
}
inline void Response::set_type(::td::railviz::protocol::Response_TYPE value) {
  assert(::td::railviz::protocol::Response_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string msg = 3;
inline bool Response::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Response::msg() const {
  return *msg_;
}
inline void Response::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Response::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Response::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Response::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .td.railviz.protocol.Station stations = 4;
inline int Response::stations_size() const {
  return stations_.size();
}
inline void Response::clear_stations() {
  stations_.Clear();
}
inline const ::td::railviz::protocol::Station& Response::stations(int index) const {
  return stations_.Get(index);
}
inline ::td::railviz::protocol::Station* Response::mutable_stations(int index) {
  return stations_.Mutable(index);
}
inline ::td::railviz::protocol::Station* Response::add_stations() {
  return stations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >&
Response::stations() const {
  return stations_;
}
inline ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >*
Response::mutable_stations() {
  return &stations_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace railviz
}  // namespace td

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::td::railviz::protocol::Request_TYPE>() {
  return ::td::railviz::protocol::Request_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::td::railviz::protocol::Response_TYPE>() {
  return ::td::railviz::protocol::Response_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RailvizProtocolV2_2eproto__INCLUDED
