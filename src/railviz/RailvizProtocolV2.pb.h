// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RailvizProtocolV2.proto

#ifndef PROTOBUF_RailvizProtocolV2_2eproto__INCLUDED
#define PROTOBUF_RailvizProtocolV2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace td {
namespace railviz {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RailvizProtocolV2_2eproto();
void protobuf_AssignDesc_RailvizProtocolV2_2eproto();
void protobuf_ShutdownFile_RailvizProtocolV2_2eproto();

class Station;
class Connection;
class LightConnection;
class Train;
class Request;
class Response;

enum Request_TYPE {
  Request_TYPE_ALL_STATIONS = 1,
  Request_TYPE_DETAILED_STATION = 2,
  Request_TYPE_ALL_TRAINS = 3,
  Request_TYPE_DETAILED_TRAIN = 4
};
bool Request_TYPE_IsValid(int value);
const Request_TYPE Request_TYPE_TYPE_MIN = Request_TYPE_ALL_STATIONS;
const Request_TYPE Request_TYPE_TYPE_MAX = Request_TYPE_DETAILED_TRAIN;
const int Request_TYPE_TYPE_ARRAYSIZE = Request_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_TYPE_descriptor();
inline const ::std::string& Request_TYPE_Name(Request_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_TYPE_descriptor(), value);
}
inline bool Request_TYPE_Parse(
    const ::std::string& name, Request_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_TYPE>(
    Request_TYPE_descriptor(), name, value);
}
enum Response_TYPE {
  Response_TYPE_ERROR = 1,
  Response_TYPE_INFO = 2,
  Response_TYPE_ALL_STATIONS = 3,
  Response_TYPE_DETAILED_STATION = 4,
  Response_TYPE_ALL_TRAINS = 5,
  Response_TYPE_DETAILED_TRAIN = 6
};
bool Response_TYPE_IsValid(int value);
const Response_TYPE Response_TYPE_TYPE_MIN = Response_TYPE_ERROR;
const Response_TYPE Response_TYPE_TYPE_MAX = Response_TYPE_DETAILED_TRAIN;
const int Response_TYPE_TYPE_ARRAYSIZE = Response_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_TYPE_descriptor();
inline const ::std::string& Response_TYPE_Name(Response_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_TYPE_descriptor(), value);
}
inline bool Response_TYPE_Parse(
    const ::std::string& name, Response_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_TYPE>(
    Response_TYPE_descriptor(), name, value);
}
// ===================================================================

class Station : public ::google::protobuf::Message {
 public:
  Station();
  virtual ~Station();

  Station(const Station& from);

  inline Station& operator=(const Station& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Station& default_instance();

  void Swap(Station* other);

  // implements Message ----------------------------------------------

  Station* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Station& from);
  void MergeFrom(const Station& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional float latitude = 3;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  inline float latitude() const;
  inline void set_latitude(float value);

  // optional float longitude = 4;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  inline float longitude() const;
  inline void set_longitude(float value);

  // @@protoc_insertion_point(class_scope:td.railviz.protocol.Station)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  float latitude_;
  float longitude_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_AssignDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_ShutdownFile_RailvizProtocolV2_2eproto();

  void InitAsDefaultInstance();
  static Station* default_instance_;
};
// -------------------------------------------------------------------

class Connection : public ::google::protobuf::Message {
 public:
  Connection();
  virtual ~Connection();

  Connection(const Connection& from);

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Connection& default_instance();

  void Swap(Connection* other);

  // implements Message ----------------------------------------------

  Connection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Connection& from);
  void MergeFrom(const Connection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 conInfoId = 1;
  inline bool has_coninfoid() const;
  inline void clear_coninfoid();
  static const int kConInfoIdFieldNumber = 1;
  inline ::google::protobuf::uint32 coninfoid() const;
  inline void set_coninfoid(::google::protobuf::uint32 value);

  // optional uint32 price = 2;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional uint32 dPlatform = 3;
  inline bool has_dplatform() const;
  inline void clear_dplatform();
  static const int kDPlatformFieldNumber = 3;
  inline ::google::protobuf::uint32 dplatform() const;
  inline void set_dplatform(::google::protobuf::uint32 value);

  // optional uint32 aPlatform = 4;
  inline bool has_aplatform() const;
  inline void clear_aplatform();
  static const int kAPlatformFieldNumber = 4;
  inline ::google::protobuf::uint32 aplatform() const;
  inline void set_aplatform(::google::protobuf::uint32 value);

  // optional uint32 clasz = 5;
  inline bool has_clasz() const;
  inline void clear_clasz();
  static const int kClaszFieldNumber = 5;
  inline ::google::protobuf::uint32 clasz() const;
  inline void set_clasz(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:td.railviz.protocol.Connection)
 private:
  inline void set_has_coninfoid();
  inline void clear_has_coninfoid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_dplatform();
  inline void clear_has_dplatform();
  inline void set_has_aplatform();
  inline void clear_has_aplatform();
  inline void set_has_clasz();
  inline void clear_has_clasz();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 coninfoid_;
  ::google::protobuf::uint32 price_;
  ::google::protobuf::uint32 dplatform_;
  ::google::protobuf::uint32 aplatform_;
  ::google::protobuf::uint32 clasz_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_AssignDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_ShutdownFile_RailvizProtocolV2_2eproto();

  void InitAsDefaultInstance();
  static Connection* default_instance_;
};
// -------------------------------------------------------------------

class LightConnection : public ::google::protobuf::Message {
 public:
  LightConnection();
  virtual ~LightConnection();

  LightConnection(const LightConnection& from);

  inline LightConnection& operator=(const LightConnection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LightConnection& default_instance();

  void Swap(LightConnection* other);

  // implements Message ----------------------------------------------

  LightConnection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LightConnection& from);
  void MergeFrom(const LightConnection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 lightConId = 1;
  inline bool has_lightconid() const;
  inline void clear_lightconid();
  static const int kLightConIdFieldNumber = 1;
  inline ::google::protobuf::uint64 lightconid() const;
  inline void set_lightconid(::google::protobuf::uint64 value);

  // optional uint32 dTime = 2;
  inline bool has_dtime() const;
  inline void clear_dtime();
  static const int kDTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 dtime() const;
  inline void set_dtime(::google::protobuf::uint32 value);

  // optional uint32 aTime = 3;
  inline bool has_atime() const;
  inline void clear_atime();
  static const int kATimeFieldNumber = 3;
  inline ::google::protobuf::uint32 atime() const;
  inline void set_atime(::google::protobuf::uint32 value);

  // optional .td.railviz.protocol.Connection connection = 4;
  inline bool has_connection() const;
  inline void clear_connection();
  static const int kConnectionFieldNumber = 4;
  inline const ::td::railviz::protocol::Connection& connection() const;
  inline ::td::railviz::protocol::Connection* mutable_connection();
  inline ::td::railviz::protocol::Connection* release_connection();
  inline void set_allocated_connection(::td::railviz::protocol::Connection* connection);

  // @@protoc_insertion_point(class_scope:td.railviz.protocol.LightConnection)
 private:
  inline void set_has_lightconid();
  inline void clear_has_lightconid();
  inline void set_has_dtime();
  inline void clear_has_dtime();
  inline void set_has_atime();
  inline void clear_has_atime();
  inline void set_has_connection();
  inline void clear_has_connection();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 lightconid_;
  ::google::protobuf::uint32 dtime_;
  ::google::protobuf::uint32 atime_;
  ::td::railviz::protocol::Connection* connection_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_AssignDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_ShutdownFile_RailvizProtocolV2_2eproto();

  void InitAsDefaultInstance();
  static LightConnection* default_instance_;
};
// -------------------------------------------------------------------

class Train : public ::google::protobuf::Message {
 public:
  Train();
  virtual ~Train();

  Train(const Train& from);

  inline Train& operator=(const Train& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Train& default_instance();

  void Swap(Train* other);

  // implements Message ----------------------------------------------

  Train* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Train& from);
  void MergeFrom(const Train& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .td.railviz.protocol.LightConnection light_connection = 2;
  inline bool has_light_connection() const;
  inline void clear_light_connection();
  static const int kLightConnectionFieldNumber = 2;
  inline const ::td::railviz::protocol::LightConnection& light_connection() const;
  inline ::td::railviz::protocol::LightConnection* mutable_light_connection();
  inline ::td::railviz::protocol::LightConnection* release_light_connection();
  inline void set_allocated_light_connection(::td::railviz::protocol::LightConnection* light_connection);

  // @@protoc_insertion_point(class_scope:td.railviz.protocol.Train)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_light_connection();
  inline void clear_has_light_connection();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::td::railviz::protocol::LightConnection* light_connection_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_AssignDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_ShutdownFile_RailvizProtocolV2_2eproto();

  void InitAsDefaultInstance();
  static Train* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_TYPE TYPE;
  static const TYPE ALL_STATIONS = Request_TYPE_ALL_STATIONS;
  static const TYPE DETAILED_STATION = Request_TYPE_DETAILED_STATION;
  static const TYPE ALL_TRAINS = Request_TYPE_ALL_TRAINS;
  static const TYPE DETAILED_TRAIN = Request_TYPE_DETAILED_TRAIN;
  static inline bool TYPE_IsValid(int value) {
    return Request_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    Request_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    Request_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    Request_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return Request_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return Request_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return Request_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 protocol_version = 1;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  inline ::google::protobuf::int32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::int32 value);

  // required .td.railviz.protocol.Request.TYPE type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::td::railviz::protocol::Request_TYPE type() const;
  inline void set_type(::td::railviz::protocol::Request_TYPE value);

  // repeated .td.railviz.protocol.Station stations = 3;
  inline int stations_size() const;
  inline void clear_stations();
  static const int kStationsFieldNumber = 3;
  inline const ::td::railviz::protocol::Station& stations(int index) const;
  inline ::td::railviz::protocol::Station* mutable_stations(int index);
  inline ::td::railviz::protocol::Station* add_stations();
  inline const ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >&
      stations() const;
  inline ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >*
      mutable_stations();

  // @@protoc_insertion_point(class_scope:td.railviz.protocol.Request)
 private:
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 protocol_version_;
  int type_;
  ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station > stations_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_AssignDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_ShutdownFile_RailvizProtocolV2_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_TYPE TYPE;
  static const TYPE ERROR = Response_TYPE_ERROR;
  static const TYPE INFO = Response_TYPE_INFO;
  static const TYPE ALL_STATIONS = Response_TYPE_ALL_STATIONS;
  static const TYPE DETAILED_STATION = Response_TYPE_DETAILED_STATION;
  static const TYPE ALL_TRAINS = Response_TYPE_ALL_TRAINS;
  static const TYPE DETAILED_TRAIN = Response_TYPE_DETAILED_TRAIN;
  static inline bool TYPE_IsValid(int value) {
    return Response_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    Response_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    Response_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    Response_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return Response_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return Response_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return Response_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 protocol_version = 1;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  inline ::google::protobuf::int32 protocol_version() const;
  inline void set_protocol_version(::google::protobuf::int32 value);

  // required .td.railviz.protocol.Response.TYPE type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::td::railviz::protocol::Response_TYPE type() const;
  inline void set_type(::td::railviz::protocol::Response_TYPE value);

  // optional string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // repeated .td.railviz.protocol.Station stations = 4;
  inline int stations_size() const;
  inline void clear_stations();
  static const int kStationsFieldNumber = 4;
  inline const ::td::railviz::protocol::Station& stations(int index) const;
  inline ::td::railviz::protocol::Station* mutable_stations(int index);
  inline ::td::railviz::protocol::Station* add_stations();
  inline const ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >&
      stations() const;
  inline ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >*
      mutable_stations();

  // repeated .td.railviz.protocol.Train strains = 5;
  inline int strains_size() const;
  inline void clear_strains();
  static const int kStrainsFieldNumber = 5;
  inline const ::td::railviz::protocol::Train& strains(int index) const;
  inline ::td::railviz::protocol::Train* mutable_strains(int index);
  inline ::td::railviz::protocol::Train* add_strains();
  inline const ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Train >&
      strains() const;
  inline ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Train >*
      mutable_strains();

  // @@protoc_insertion_point(class_scope:td.railviz.protocol.Response)
 private:
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 protocol_version_;
  int type_;
  ::std::string* msg_;
  ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station > stations_;
  ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Train > strains_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_AssignDesc_RailvizProtocolV2_2eproto();
  friend void protobuf_ShutdownFile_RailvizProtocolV2_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Station

// optional uint32 id = 1;
inline bool Station::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Station::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Station::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Station::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Station::id() const {
  return id_;
}
inline void Station::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Station::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Station::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Station::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Station::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Station::name() const {
  return *name_;
}
inline void Station::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Station::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Station::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Station::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Station::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Station::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float latitude = 3;
inline bool Station::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Station::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Station::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Station::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float Station::latitude() const {
  return latitude_;
}
inline void Station::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
}

// optional float longitude = 4;
inline bool Station::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Station::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Station::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Station::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float Station::longitude() const {
  return longitude_;
}
inline void Station::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
}

// -------------------------------------------------------------------

// Connection

// optional uint32 conInfoId = 1;
inline bool Connection::has_coninfoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Connection::set_has_coninfoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Connection::clear_has_coninfoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Connection::clear_coninfoid() {
  coninfoid_ = 0u;
  clear_has_coninfoid();
}
inline ::google::protobuf::uint32 Connection::coninfoid() const {
  return coninfoid_;
}
inline void Connection::set_coninfoid(::google::protobuf::uint32 value) {
  set_has_coninfoid();
  coninfoid_ = value;
}

// optional uint32 price = 2;
inline bool Connection::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Connection::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Connection::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Connection::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 Connection::price() const {
  return price_;
}
inline void Connection::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// optional uint32 dPlatform = 3;
inline bool Connection::has_dplatform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Connection::set_has_dplatform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Connection::clear_has_dplatform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Connection::clear_dplatform() {
  dplatform_ = 0u;
  clear_has_dplatform();
}
inline ::google::protobuf::uint32 Connection::dplatform() const {
  return dplatform_;
}
inline void Connection::set_dplatform(::google::protobuf::uint32 value) {
  set_has_dplatform();
  dplatform_ = value;
}

// optional uint32 aPlatform = 4;
inline bool Connection::has_aplatform() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Connection::set_has_aplatform() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Connection::clear_has_aplatform() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Connection::clear_aplatform() {
  aplatform_ = 0u;
  clear_has_aplatform();
}
inline ::google::protobuf::uint32 Connection::aplatform() const {
  return aplatform_;
}
inline void Connection::set_aplatform(::google::protobuf::uint32 value) {
  set_has_aplatform();
  aplatform_ = value;
}

// optional uint32 clasz = 5;
inline bool Connection::has_clasz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Connection::set_has_clasz() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Connection::clear_has_clasz() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Connection::clear_clasz() {
  clasz_ = 0u;
  clear_has_clasz();
}
inline ::google::protobuf::uint32 Connection::clasz() const {
  return clasz_;
}
inline void Connection::set_clasz(::google::protobuf::uint32 value) {
  set_has_clasz();
  clasz_ = value;
}

// -------------------------------------------------------------------

// LightConnection

// optional uint64 lightConId = 1;
inline bool LightConnection::has_lightconid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LightConnection::set_has_lightconid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LightConnection::clear_has_lightconid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LightConnection::clear_lightconid() {
  lightconid_ = GOOGLE_ULONGLONG(0);
  clear_has_lightconid();
}
inline ::google::protobuf::uint64 LightConnection::lightconid() const {
  return lightconid_;
}
inline void LightConnection::set_lightconid(::google::protobuf::uint64 value) {
  set_has_lightconid();
  lightconid_ = value;
}

// optional uint32 dTime = 2;
inline bool LightConnection::has_dtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LightConnection::set_has_dtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LightConnection::clear_has_dtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LightConnection::clear_dtime() {
  dtime_ = 0u;
  clear_has_dtime();
}
inline ::google::protobuf::uint32 LightConnection::dtime() const {
  return dtime_;
}
inline void LightConnection::set_dtime(::google::protobuf::uint32 value) {
  set_has_dtime();
  dtime_ = value;
}

// optional uint32 aTime = 3;
inline bool LightConnection::has_atime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LightConnection::set_has_atime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LightConnection::clear_has_atime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LightConnection::clear_atime() {
  atime_ = 0u;
  clear_has_atime();
}
inline ::google::protobuf::uint32 LightConnection::atime() const {
  return atime_;
}
inline void LightConnection::set_atime(::google::protobuf::uint32 value) {
  set_has_atime();
  atime_ = value;
}

// optional .td.railviz.protocol.Connection connection = 4;
inline bool LightConnection::has_connection() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LightConnection::set_has_connection() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LightConnection::clear_has_connection() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LightConnection::clear_connection() {
  if (connection_ != NULL) connection_->::td::railviz::protocol::Connection::Clear();
  clear_has_connection();
}
inline const ::td::railviz::protocol::Connection& LightConnection::connection() const {
  return connection_ != NULL ? *connection_ : *default_instance_->connection_;
}
inline ::td::railviz::protocol::Connection* LightConnection::mutable_connection() {
  set_has_connection();
  if (connection_ == NULL) connection_ = new ::td::railviz::protocol::Connection;
  return connection_;
}
inline ::td::railviz::protocol::Connection* LightConnection::release_connection() {
  clear_has_connection();
  ::td::railviz::protocol::Connection* temp = connection_;
  connection_ = NULL;
  return temp;
}
inline void LightConnection::set_allocated_connection(::td::railviz::protocol::Connection* connection) {
  delete connection_;
  connection_ = connection;
  if (connection) {
    set_has_connection();
  } else {
    clear_has_connection();
  }
}

// -------------------------------------------------------------------

// Train

// optional uint32 id = 1;
inline bool Train::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Train::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Train::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Train::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Train::id() const {
  return id_;
}
inline void Train::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .td.railviz.protocol.LightConnection light_connection = 2;
inline bool Train::has_light_connection() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Train::set_has_light_connection() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Train::clear_has_light_connection() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Train::clear_light_connection() {
  if (light_connection_ != NULL) light_connection_->::td::railviz::protocol::LightConnection::Clear();
  clear_has_light_connection();
}
inline const ::td::railviz::protocol::LightConnection& Train::light_connection() const {
  return light_connection_ != NULL ? *light_connection_ : *default_instance_->light_connection_;
}
inline ::td::railviz::protocol::LightConnection* Train::mutable_light_connection() {
  set_has_light_connection();
  if (light_connection_ == NULL) light_connection_ = new ::td::railviz::protocol::LightConnection;
  return light_connection_;
}
inline ::td::railviz::protocol::LightConnection* Train::release_light_connection() {
  clear_has_light_connection();
  ::td::railviz::protocol::LightConnection* temp = light_connection_;
  light_connection_ = NULL;
  return temp;
}
inline void Train::set_allocated_light_connection(::td::railviz::protocol::LightConnection* light_connection) {
  delete light_connection_;
  light_connection_ = light_connection;
  if (light_connection) {
    set_has_light_connection();
  } else {
    clear_has_light_connection();
  }
}

// -------------------------------------------------------------------

// Request

// required int32 protocol_version = 1;
inline bool Request::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_protocol_version() {
  protocol_version_ = 0;
  clear_has_protocol_version();
}
inline ::google::protobuf::int32 Request::protocol_version() const {
  return protocol_version_;
}
inline void Request::set_protocol_version(::google::protobuf::int32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
}

// required .td.railviz.protocol.Request.TYPE type = 2;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::td::railviz::protocol::Request_TYPE Request::type() const {
  return static_cast< ::td::railviz::protocol::Request_TYPE >(type_);
}
inline void Request::set_type(::td::railviz::protocol::Request_TYPE value) {
  assert(::td::railviz::protocol::Request_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated .td.railviz.protocol.Station stations = 3;
inline int Request::stations_size() const {
  return stations_.size();
}
inline void Request::clear_stations() {
  stations_.Clear();
}
inline const ::td::railviz::protocol::Station& Request::stations(int index) const {
  return stations_.Get(index);
}
inline ::td::railviz::protocol::Station* Request::mutable_stations(int index) {
  return stations_.Mutable(index);
}
inline ::td::railviz::protocol::Station* Request::add_stations() {
  return stations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >&
Request::stations() const {
  return stations_;
}
inline ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >*
Request::mutable_stations() {
  return &stations_;
}

// -------------------------------------------------------------------

// Response

// required int32 protocol_version = 1;
inline bool Response::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_protocol_version() {
  protocol_version_ = 0;
  clear_has_protocol_version();
}
inline ::google::protobuf::int32 Response::protocol_version() const {
  return protocol_version_;
}
inline void Response::set_protocol_version(::google::protobuf::int32 value) {
  set_has_protocol_version();
  protocol_version_ = value;
}

// required .td.railviz.protocol.Response.TYPE type = 2;
inline bool Response::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::td::railviz::protocol::Response_TYPE Response::type() const {
  return static_cast< ::td::railviz::protocol::Response_TYPE >(type_);
}
inline void Response::set_type(::td::railviz::protocol::Response_TYPE value) {
  assert(::td::railviz::protocol::Response_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string msg = 3;
inline bool Response::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Response::msg() const {
  return *msg_;
}
inline void Response::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Response::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Response::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Response::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Response::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .td.railviz.protocol.Station stations = 4;
inline int Response::stations_size() const {
  return stations_.size();
}
inline void Response::clear_stations() {
  stations_.Clear();
}
inline const ::td::railviz::protocol::Station& Response::stations(int index) const {
  return stations_.Get(index);
}
inline ::td::railviz::protocol::Station* Response::mutable_stations(int index) {
  return stations_.Mutable(index);
}
inline ::td::railviz::protocol::Station* Response::add_stations() {
  return stations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >&
Response::stations() const {
  return stations_;
}
inline ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Station >*
Response::mutable_stations() {
  return &stations_;
}

// repeated .td.railviz.protocol.Train strains = 5;
inline int Response::strains_size() const {
  return strains_.size();
}
inline void Response::clear_strains() {
  strains_.Clear();
}
inline const ::td::railviz::protocol::Train& Response::strains(int index) const {
  return strains_.Get(index);
}
inline ::td::railviz::protocol::Train* Response::mutable_strains(int index) {
  return strains_.Mutable(index);
}
inline ::td::railviz::protocol::Train* Response::add_strains() {
  return strains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Train >&
Response::strains() const {
  return strains_;
}
inline ::google::protobuf::RepeatedPtrField< ::td::railviz::protocol::Train >*
Response::mutable_strains() {
  return &strains_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace railviz
}  // namespace td

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::td::railviz::protocol::Request_TYPE>() {
  return ::td::railviz::protocol::Request_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::td::railviz::protocol::Response_TYPE>() {
  return ::td::railviz::protocol::Response_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RailvizProtocolV2_2eproto__INCLUDED
