cmake_minimum_required(VERSION 2.8)
project(motis)

include_directories(${CMAKE_BINARY_DIR}/generated)

################################
# MOTIS Version
################################
execute_process(
  COMMAND git rev-parse --abbrev-ref HEAD
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE motis_git_branch
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

execute_process(
  COMMAND git --no-pager log -1 --format=%h
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE motis_git_ref
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

execute_process(
  COMMAND git describe --tags --dirty=-dirty
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE motis_git_tag
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

configure_file (
  "base/core/include/motis/core/version.h.in"
  "${CMAKE_BINARY_DIR}/generated/version.h"
)


################################
# Basic Compiler Flags
################################
foreach(flags CMAKE_C_FLAGS CMAKE_C_FLAGS_RELEASE CMAKE_C_FLAGS_DEBUG)
  string(REPLACE "-O3" "-O2" ${flags} "${${flags}}")
endforeach()

foreach(flags CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_DEBUG)
  string(REPLACE "-O3" "-O2" ${flags} "${${flags}}")
endforeach()

if (NOT MSVC)
  set(MOTIS_CXX_FLAGS "-std=c++11 -Wall -Wextra")
  if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
    set(MOTIS_CXX_FLAGS "${MOTIS_CXX_FLAGS} -Wno-maybe-uninitialized")
  endif()
else()
  set(MOTIS_CXX_FLAGS "-DBOOST_THREAD_USE_LIB")
endif()

if(MINGW)
  add_definitions(-DWINVER=0x0501)
  add_definitions(-D_WIN32_WINNT=0x0501)
  add_definitions(-D_WIN32_IE=0x0501)
  add_definitions(-D_WEBSOCKETPP_NO_CPP11_THREAD_)
  add_definitions(-DBOOST_THREAD_USE_LIB)
  set(NETWORKING ws2_32 mswsock)
endif()


################################
# 3rd Party (Boost, pthread)
################################
if (MSVC)
  set(Boost_USE_STATIC_LIBS ON)
endif()
find_package(Boost COMPONENTS system filesystem regex program_options thread REQUIRED)
find_package(Threads)

link_directories(${Boost_LIBRARY_DIRS})
include_directories(SYSTEM ${Boost_INCLUDE_DIR})


################################
# Contained Dependencies
################################
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/external_lib) # for osrm-backend
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/external_lib/flatbuffers/include)
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/external_lib/googletest/googletest/include)
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/external_lib/leveldb/include)
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/external_lib/miniz)
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/external_lib/osrm-backend)
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/external_lib/osrm-backend/include)
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/external_lib/osrm-backend/third_party)
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/external_lib/pugixml/src)
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/external_lib/snappy-cmake)
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/external_lib/sparsehash/src)
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/external_lib/sqlite/include)
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/external_lib/sqlpp11/include)
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/external_lib/sqlpp11-connector-sqlite3/include)
include_directories(SYSTEM ${CMAKE_SOURCE_DIR}/external_lib/websocketpp)
include_directories(${CMAKE_SOURCE_DIR}/external_lib/conf/include)
include_directories(${CMAKE_SOURCE_DIR}/external_lib/guess/include)
include_directories(${CMAKE_SOURCE_DIR}/external_lib/net/include)
include_directories(${CMAKE_SOURCE_DIR}/external_lib/parser/include)

add_subdirectory(external_lib/flatbuffers EXCLUDE_FROM_ALL)
add_subdirectory(external_lib/googletest/googletest EXCLUDE_FROM_ALL)
add_subdirectory(external_lib/leveldb EXCLUDE_FROM_ALL)
add_subdirectory(external_lib/osrm-backend EXCLUDE_FROM_ALL)
add_subdirectory(external_lib/pugixml/scripts EXCLUDE_FROM_ALL)
add_subdirectory(external_lib/snappy-cmake EXCLUDE_FROM_ALL)
add_subdirectory(external_lib/sqlite EXCLUDE_FROM_ALL)
add_subdirectory(external_lib/sqlpp11-connector-sqlite3/src EXCLUDE_FROM_ALL)
add_subdirectory(external_lib/conf EXCLUDE_FROM_ALL)
add_subdirectory(external_lib/guess EXCLUDE_FROM_ALL)
add_subdirectory(external_lib/net EXCLUDE_FROM_ALL)
add_subdirectory(external_lib/parser EXCLUDE_FROM_ALL)


################################
# MOTIS
################################
include_directories(${CMAKE_SOURCE_DIR}/base/bootstrap/include)
include_directories(${CMAKE_SOURCE_DIR}/base/core/include)
include_directories(${CMAKE_SOURCE_DIR}/base/loader/include)
include_directories(${CMAKE_SOURCE_DIR}/base/module/include)
include_directories(${CMAKE_SOURCE_DIR}/base/client/include)
include_directories(${CMAKE_SOURCE_DIR}/test/include)

add_subdirectory(base/core EXCLUDE_FROM_ALL)
add_subdirectory(base/loader EXCLUDE_FROM_ALL)
add_subdirectory(base/module EXCLUDE_FROM_ALL)

file(GLOB all-modules RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}/modules ${CMAKE_CURRENT_SOURCE_DIR}/modules/*)
list(REMOVE_ITEM all-modules ".DS_Store")
string (REPLACE ";" " " modules-option "${all-modules}")
set(MODULES ${modules-option} CACHE STRING "Modules to load")

string(REPLACE " " ";" modules "${MODULES}")
set(module-targets "")
set(module-test-files "")
foreach(module ${all-modules})
  include_directories(${CMAKE_SOURCE_DIR}/modules/${module}/include)
endforeach(module)
foreach(module ${modules})
  add_subdirectory(modules/${module})
  list(APPEND module-targets "motis-${module}")
  list(APPEND module-test-files "modules/${module}/*_test.cc")
  list(APPEND module-itest-files "modules/${module}/*_itest.cc")
endforeach(module)

add_subdirectory(base/bootstrap EXCLUDE_FROM_ALL)
add_subdirectory(base/launcher)
add_subdirectory(base/client)
add_subdirectory(base/eval)


################################
# Tests
################################
configure_file (
  ${CMAKE_SOURCE_DIR}/test/test_dir.h.in
  ${CMAKE_BINARY_DIR}/generated/test_dir.h
)
file(GLOB_RECURSE motis-test-files test/src/*.cc)
file(GLOB_RECURSE motis-modules-test-files ${module-test-files})
file(GLOB_RECURSE motis-base-test-files base/*_test.cc)
add_executable(motis-test EXCLUDE_FROM_ALL
  ${motis-test-files}
  ${motis-modules-test-files}
  ${motis-base-test-files})
set_target_properties(motis-test PROPERTIES COMPILE_FLAGS ${MOTIS_CXX_FLAGS})
target_link_libraries(motis-test
  ${module-targets}
  motis-bootstrap
  motis-core
  motis-loader
  motis-module
  conf
  ${Boost_LIBRARIES}
)
target_link_libraries(motis-test gtest gtest_main)


################################
# Integration Tests
################################
configure_file (
  ${CMAKE_SOURCE_DIR}/test/test_dir.h.in
  ${CMAKE_BINARY_DIR}/generated/test_dir.h
)
file(GLOB_RECURSE motis-modules-itest-files ${module-itest-files})
file(GLOB_RECURSE motis-base-itest-files base/*_itest.cc)
add_executable(motis-itest EXCLUDE_FROM_ALL
  ${motis-test-files}
  ${motis-modules-itest-files}
  ${motis-base-itest-files})
set_target_properties(motis-itest PROPERTIES COMPILE_FLAGS ${MOTIS_CXX_FLAGS})
target_link_libraries(motis-itest
  ${module-targets}
  motis-bootstrap
  motis-core
  motis-loader
  motis-module
  conf
  ${Boost_LIBRARIES}
)
target_link_libraries(motis-itest gtest gtest_main)
