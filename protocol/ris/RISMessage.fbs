namespace motis.ris;

// ----------------------------------------------------------------------------
// Common
// ----------------------------------------------------------------------------
enum EventType : bool {Arrival, Departure}
enum StationIdType : byte {Context, EVA, DS100}
table Event {
  // if stationIdType is Context, station Id is not set
  stationIdType: StationIdType;
  stationId: string; // optional
  
  trainIndex: uint;
  lineId: string;
  type: EventType;
  scheduledTime: ulong;
}

table TripId {
  base: Event;

  targetStationIdType: StationIdType;
  targetStationId: string;
  targetScheduledTime: ulong;
}

// ----------------------------------------------------------------------------
// Train centered Messages
// ----------------------------------------------------------------------------
table CancelMessage {
  tripId: TripId;
  events: [Event] (required);
}

table UpdatedEvent {
  base: Event;
  updatedTime: ulong;
}

enum DelayType : bool {Is, Forecast} // Ist and IstProg
table DelayMessage {
  tripId: TripId;
  type: DelayType;
  events: [UpdatedEvent] (required);
}

table AdditionalEvent {
  base: Event;
  trainCategory: string (required);
  track: string;  // optional
}

table AdditionMessage {
  tripId: TripId;
  events: [AdditionalEvent];
}

enum RerouteStatus : bool {Normal, UmlNeu}
table ReroutedEvent {
  base: AdditionalEvent (required);
  status: RerouteStatus;
}

table RerouteMessage {
  tripId: TripId;
  cancelledEvents: [Event] (required);
  newEvents: [ReroutedEvent] (required);
}

// ----------------------------------------------------------------------------
// Connection Event Messages
// ----------------------------------------------------------------------------
table ConnectionDecision {
  tripId: TripId;
  base: Event (required);
  hold: bool;
}

table ConnectionDecisionMessage { // Anschluss
  fromTripId: TripId;
  from: Event (required);
  to: [ConnectionDecision] (required);
}

table ConnectionAssessment {
  tripId: TripId;
  base: Event (required);
  assessment: int;
}

table ConnectionAssessmentMessage { // Anschlussbewertung
  fromTripId: TripId;
  from: Event (required);
  to: [ConnectionAssessment] (required);
}

// ----------------------------------------------------------------------------
// Connection Envelope
// ----------------------------------------------------------------------------

union MessageUnion {
  DelayMessage,
  CancelMessage,
  AdditionMessage,
  RerouteMessage,
  ConnectionDecisionMessage,
  ConnectionAssessmentMessage
}

table Message {
  content: MessageUnion (required);
}

root_type Message;
