namespace motis.ris;

// ----------------------------------------------------------------------------
// Common
// ----------------------------------------------------------------------------
enum EventType : bool {Arrival, Departure}
table Event {
  station_id: string;
  service_num: uint;
  line_id: string;
  type: EventType;
  schedule_time: ulong;
}

enum TripType : bool {Schedule, Additional}
table TripId {
  station_id: string;
  service_num: uint;
  schedule_time: ulong;

  trip_type: TripType;
}

// ----------------------------------------------------------------------------
// Train centered Messages
// ----------------------------------------------------------------------------
table CancelMessage {
  trip_id: TripId;
  events: [Event] (required);
}

table UpdatedEvent {
  base: Event;
  updated_time: ulong;
}

enum DelayType : bool {Is, Forecast} // Ist and IstProg
table DelayMessage {
  trip_id: TripId;
  type: DelayType;
  events: [UpdatedEvent] (required);
}

table AdditionalEvent {
  base: Event;
  category: string (required);
  track: string;  // optional
}

table AdditionMessage {
  trip_id: TripId;
  events: [AdditionalEvent];
}

enum RerouteStatus : bool {Normal, UmlNeu}
table ReroutedEvent {
  base: AdditionalEvent (required);
  status: RerouteStatus;
}

table RerouteMessage {
  trip_id: TripId;
  cancelled_events: [Event] (required);
  new_events: [ReroutedEvent] (required);
}

// ----------------------------------------------------------------------------
// Connection Event Messages
// ----------------------------------------------------------------------------
table ConnectionDecision {
  trip_id: TripId;
  base: Event (required);
  hold: bool;
}

table ConnectionDecisionMessage { // Anschluss
  from_trip_id: TripId;
  from: Event (required);
  to: [ConnectionDecision] (required);
}

table ConnectionAssessment {
  trip_id: TripId;
  base: Event (required);
  assessment: int;
}

table ConnectionAssessmentMessage { // Anschlussbewertung
  from_trip_id: TripId;
  from: Event (required);
  to: [ConnectionAssessment] (required);
}

// ----------------------------------------------------------------------------
// Connection Envelope
// ----------------------------------------------------------------------------

union MessageUnion {
  DelayMessage,
  CancelMessage,
  AdditionMessage,
  RerouteMessage,
  ConnectionDecisionMessage,
  ConnectionAssessmentMessage
}

table Message {
  content: MessageUnion (required);
}

root_type Message;
