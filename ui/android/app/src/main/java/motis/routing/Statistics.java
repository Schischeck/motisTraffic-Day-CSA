// automatically generated by the FlatBuffers compiler, do not modify

package motis.routing;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Statistics extends Struct {
  public Statistics __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public boolean maxLabelQuit() { return 0!=bb.get(bb_pos + 0); }
  public long labelsCreated() { return (long)bb.getInt(bb_pos + 4) & 0xFFFFFFFFL; }
  public long startLabelCount() { return (long)bb.getInt(bb_pos + 8) & 0xFFFFFFFFL; }
  public long labelsPopped() { return (long)bb.getInt(bb_pos + 12) & 0xFFFFFFFFL; }
  public long labelsEqualsPopped() { return (long)bb.getInt(bb_pos + 16) & 0xFFFFFFFFL; }
  public long labelsFiltered() { return (long)bb.getInt(bb_pos + 20) & 0xFFFFFFFFL; }
  public long labelsDominatedByResults() { return (long)bb.getInt(bb_pos + 24) & 0xFFFFFFFFL; }
  public long labelsDominatedByFormerLabels() { return (long)bb.getInt(bb_pos + 28) & 0xFFFFFFFFL; }
  public long labelsDominatedByLaterLabels() { return (long)bb.getInt(bb_pos + 32) & 0xFFFFFFFFL; }
  public long labelsPoppedUntilFirstResult() { return (long)bb.getInt(bb_pos + 36) & 0xFFFFFFFFL; }
  public long labelsPoppedAfterLastResult() { return (long)bb.getInt(bb_pos + 40) & 0xFFFFFFFFL; }
  public long priorityQueueMaxSize() { return (long)bb.getInt(bb_pos + 44) & 0xFFFFFFFFL; }
  public long travelTimeLb() { return (long)bb.getInt(bb_pos + 48) & 0xFFFFFFFFL; }
  public long transfersLb() { return (long)bb.getInt(bb_pos + 52) & 0xFFFFFFFFL; }
  public long totalCalculationTime() { return (long)bb.getInt(bb_pos + 56) & 0xFFFFFFFFL; }
  public long paretoDijkstra() { return (long)bb.getInt(bb_pos + 60) & 0xFFFFFFFFL; }
  public long numBytesInUse() { return (long)bb.getInt(bb_pos + 64) & 0xFFFFFFFFL; }

  public static int createStatistics(FlatBufferBuilder builder, boolean maxLabelQuit, long labelsCreated, long startLabelCount, long labelsPopped, long labelsEqualsPopped, long labelsFiltered, long labelsDominatedByResults, long labelsDominatedByFormerLabels, long labelsDominatedByLaterLabels, long labelsPoppedUntilFirstResult, long labelsPoppedAfterLastResult, long priorityQueueMaxSize, long travelTimeLb, long transfersLb, long totalCalculationTime, long paretoDijkstra, long numBytesInUse) {
    builder.prep(4, 68);
    builder.putInt((int)numBytesInUse);
    builder.putInt((int)paretoDijkstra);
    builder.putInt((int)totalCalculationTime);
    builder.putInt((int)transfersLb);
    builder.putInt((int)travelTimeLb);
    builder.putInt((int)priorityQueueMaxSize);
    builder.putInt((int)labelsPoppedAfterLastResult);
    builder.putInt((int)labelsPoppedUntilFirstResult);
    builder.putInt((int)labelsDominatedByLaterLabels);
    builder.putInt((int)labelsDominatedByFormerLabels);
    builder.putInt((int)labelsDominatedByResults);
    builder.putInt((int)labelsFiltered);
    builder.putInt((int)labelsEqualsPopped);
    builder.putInt((int)labelsPopped);
    builder.putInt((int)startLabelCount);
    builder.putInt((int)labelsCreated);
    builder.pad(3);
    builder.putBoolean(maxLabelQuit);
    return builder.offset();
  }
};

